import matplotlib.pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.graphics.tsaplots import plot_acf


def check_boundedness(data):
    x_values = [item[0] for item in data]
    k_values = [item[1] for item in data]

    # Perform Augmented Dickey-Fuller test on k(x) values
    result = adfuller(k_values)

    # Extract ADF test statistic and p-value
    adf_statistic = result[0]
    p_value = result[1]
    alpha = 0.05
    print("ADF test statistic:", adf_statistic)
    print("MacKinnon's approximate p-value:", p_value)

    # Check if the series indicates bounded behavior
    if p_value < alpha:
        print("The series does not indicate bounded behavior.")
    else:
        print("The series indicates bounded behavior.")

data = [
    (1000000, 27.6310211159), (2000000, 29.0173154770), (3000000, 29.8282456933),
    (4000000, 30.4036098382), (5000000, 30.8498969408), (6000000, 31.2145400544),
    (7000000, 31.5228414140), (8000000, 31.7899041993), (9000000, 32.0254702706),
    (10000000, 32.2361913019), (11000000, 32.4268116615), (12000000, 32.6008344155),
    (13000000, 32.7609198309), (14000000, 32.9091357752), (15000000, 33.0471215181),
    (16000000, 33.1761985604), (17000000, 33.2974478040), (18000000, 33.4117646317),
    (19000000, 33.5198990743), (20000000, 33.6224856630), (21000000, 33.7200659914),
    (22000000, 33.8131060226), (23000000, 33.9020095478), (24000000, 33.9871287766),
    (25000000, 34.0687727657), (26000000, 34.1472141920), (27000000, 34.2226948479),
    (28000000, 34.2954301363), (29000000, 34.3656127759), (30000000, 34.4334158793),
    (31000000, 34.4989955249), (32000000, 34.5624929215), (33000000, 34.6240362389),
    (34000000, 34.6837421652), (35000000, 34.7417172389), (36000000, 34.7980589928),
    (37000000, 34.8528569412), (38000000, 34.9061934354), (39000000, 34.9581444082),
    (40000000, 35.0087800242), (41000000, 35.0581652493), (42000000, 35.1063603525),
    (43000000, 35.1534213473), (44000000, 35.1994003838), (45000000, 35.2443460955),
    (46000000, 35.2883039089), (47000000, 35.3313163193), (48000000, 35.3734231377),
    (49000000, 35.4146617121), (50000000, 35.4550671268), (51000000, 35.4946723814),
    (52000000, 35.5335085531), (53000000, 35.5716049430), (54000000, 35.6089892091),
    (55000000, 35.6456874864), (56000000, 35.6817244974), (57000000, 35.7171236516),
    (58000000, 35.7519071370), (59000000, 35.7860960037), (60000000, 35.8197102404),
    (61000000, 35.8527688443), (62000000, 35.8852898860), (63000000, 35.9172905687),
    (64000000, 35.9487872826), (65000000, 35.9797956557), (66000000, 36.0103306000),
    (67000000, 36.0404063547), (68000000, 36.0700365263), (69000000, 36.0992341251),
    (70000000, 36.1280116000), (71000000, 36.1563808700), (72000000, 36.1843533540),
    (73000000, 36.2119399982), (74000000, 36.2391513023), (75000000, 36.2659973430),
    (76000000, 36.2924877965), (77000000, 36.3186319596), (78000000, 36.3444387693),
    (79000000, 36.3699168209), (80000000, 36.3950743853), (81000000, 36.4199194253),
    (82000000, 36.4444596105), (83000000, 36.4687023315), (84000000, 36.4926547136),
    (85000000, 36.5163236289), (86000000, 36.5397157084), (87000000, 36.5628373532),
    (88000000, 36.5856947449), (89000000, 36.6082938554), (90000000, 36.6306404566),
    (91000000, 36.6527401290), (92000000, 36.6745982700), (93000000, 36.6962201022),
    (94000000, 36.7176106805), (95000000, 36.7387748991), (96000000, 36.7597174989),
    (97000000, 36.7804430729), (98000000, 36.8009560733), (99000000, 36.8212608162),
    (100000000, 36.8413614879)
]

check_boundedness(data)